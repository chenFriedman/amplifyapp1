
type Bitcoin {
  date: String!
  ils: Values
  usd: Values
  isFavorite: Boolean
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Values {
  open: Float
  high: Float
  low: Float
  close: Float
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input ValuesInput {
  open: Float
  high: Float
  low: Float
  close: Float
}

type ModelBitcoinConnection {
  items: [Bitcoin]!
  nextToken: String
}

input ModelBitcoinFilterInput {
  date: ModelStringInput
  isFavorite: ModelBooleanInput
  and: [ModelBitcoinFilterInput]
  or: [ModelBitcoinFilterInput]
  not: ModelBitcoinFilterInput
}

type Query {
  getBitcoin(id: ID!): Bitcoin
  listBitcoins(filter: ModelBitcoinFilterInput, limit: Int, nextToken: String): ModelBitcoinConnection
}

input ModelBitcoinConditionInput {
  date: ModelStringInput
  isFavorite: ModelBooleanInput
  and: [ModelBitcoinConditionInput]
  or: [ModelBitcoinConditionInput]
  not: ModelBitcoinConditionInput
}

input CreateBitcoinInput {
  date: String!
  ils: ValuesInput
  usd: ValuesInput
  isFavorite: Boolean
  id: ID
}

input UpdateBitcoinInput {
  date: String
  ils: ValuesInput
  usd: ValuesInput
  isFavorite: Boolean
  id: ID!
}

input DeleteBitcoinInput {
  id: ID!
}

type Mutation {
  createBitcoin(input: CreateBitcoinInput!, condition: ModelBitcoinConditionInput): Bitcoin
  updateBitcoin(input: UpdateBitcoinInput!, condition: ModelBitcoinConditionInput): Bitcoin
  deleteBitcoin(input: DeleteBitcoinInput!, condition: ModelBitcoinConditionInput): Bitcoin
}

type Subscription {
  onCreateBitcoin: Bitcoin @aws_subscribe(mutations: ["createBitcoin"])
  onUpdateBitcoin: Bitcoin @aws_subscribe(mutations: ["updateBitcoin"])
  onDeleteBitcoin: Bitcoin @aws_subscribe(mutations: ["deleteBitcoin"])
}

